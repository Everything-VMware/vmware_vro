# Variables
$VCServer = "pclidcdvvcr01"              #CHANGE TO THE VCR THAT YOU WANT TO CONNECT
#Connect to vCenter Server
$VC = Connect-VIServer $VCServer

$path = "C:\Users\x196955\Documents\"    #CHANGE TO YOUR FOLDER
$file = $path + "ucsm_blades_uuids.csv"                     #THE CSV MUST BE ON PLACE (generated by running "Dump All Blades UUIDs" WF
$zonename = "dv.pc.local"                #CHANGE TO eNVIRONMENT THAT WILL BE UPDATED
$logfile = $path + "\log.txt"


$loadfile = Import-CSV $file

$dns = (Get-DnsClientServerAddress -InterfaceAlias *svcs* -AddressFamily IPv4 | Select-Object ServerAddresses -ExpandProperty ServerAddresses)[0]

foreach($data in $loadfile) {

$hostname = $data.Host

$current_uuid = Get-VMHost -name "$($data.Host).$($zonename)" |Get-VMHostAttributes | where Name -eq uuid
Write-Output $current_uuid.Value


#if ($data.'Original UUID' -eq $current_uuid.Value) {  #use the original uuid in case the "uuid sync" option was set already in UCSM
if ($data.'Unsynced UUID' -eq $current_uuid.Value) {

    Write-Output "The current UUID is the same as the one from the CSV, good to go..."
    $identAttribute = Get-CustomAttribute -Name "AutoDeploy.MachineIdentity"
    if ($identAttribute)
    {
        $VMHost = Get-VMHost -name "$($data.Host).$($zonename)"
        $anno = Get-Annotation -CustomAttribute $identAttribute -Entity $VMHost
        Write-Output $anno
        if ($anno.Value -like 'mac=*' -or $anno.Value -like 'uuid=*' ) {
            Write-Output "The current MachineIdentity is MAC, good to go..."
            $uuid_update = $data.'Original UUID'
            $anno_new = Set-Annotation -CustomAttribute "AutoDeploy.MachineIdentity" -Value "uuid=$uuid_update" -Entity $VMHost

            $host_str = $data.Host.ToString()
            $log_msg = "$host_str AutoDeploy.MachineIdentity changed from $anno to $anno_new"

            Add-Content -Path $logfile -Value $log_msg

        } else {
            Write-Output "The current MachineIdentity is already UUID!"
        }
    }
}



if (Resolve-DnsName -name $data.Host -ErrorAction SilentlyContinue){
    Write-Host $data.Host "RESOLVED"
} else {
    Write-Host "NO DNS RECORD FOUND"
}
}