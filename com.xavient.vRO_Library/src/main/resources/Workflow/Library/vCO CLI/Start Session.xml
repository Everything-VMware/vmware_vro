<?xml version="1.0" encoding="UTF-8"?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item1" object-name="workflow:name=generic" id="690bc660-ecab-4805-94bb-a8bbc94061ff" version="1.0.1" api-version="6.0.0" allowed-operations="vef" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Start Session]]></display-name>
  <position y="50.0" x="100.0"></position>
  <input>
    <param name="name" type="string"></param>
    <param name="ipAddress" type="string"></param>
  </input>
  <attrib name="_sessionId" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="45.40909090909091" x="524.5"></position>
  </workflow-item>
  <workflow-item name="item1" out-name="item2" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[_sessionId = CliConnector.createSession(workflow, name, Server.getRunningUser(), ipAddress, new Date());
var msg = "Starting session with id: " + _sessionId;
System.log(msg);
Server.log(msg);]]></script>
    <in-binding>
      <bind name="name" type="string" export-name="name"></bind>
      <bind name="ipAddress" type="string" export-name="ipAddress"></bind>
    </in-binding>
    <out-binding>
      <bind name="_sessionId" type="string" export-name="_sessionId"></bind>
    </out-binding>
    <position y="55.40909090909091" x="204.5"></position>
  </workflow-item>
  <workflow-item name="item2" out-name="item0" type="task">
    <display-name><![CDATA[Scriptable task]]></display-name>
    <script encoded="false"><![CDATA[var _session = CliConnector.getSession(_sessionId);

try {
  var _all = Server.findAllForType("Workflow", null);
  var _code = CliConnector.prepareWorkflows(_all, "_all");
  eval(_code);
} catch (e) {
  System.log(e);
  Server.log(e);
}

try {
  _all = Server.getAllModules();
  _code = CliConnector.prepareActions(_all, "_all");
  eval(_code);
} catch (e) {
  System.log(e);
  Server.log(e);
}

try {
  _all = Server.getAllPluginTypes();
  _code = CliConnector.prepareTypes(_all, "_all");
  eval(_code);
} catch (e) {
  System.log(e);
  Server.log(e);
}

function ShadowSystem() {
  this._captured = [];

  this._clear = function () {
    this._captured = [];
  };

  this.log = function (msg) {
    this._captured.push("[INFO] " + msg);
    return System.log(msg);
  };

  this.warn = function (msg) {
    this._captured.push("[WARN] " + msg);
    return System.warn(msg);
  };

  this.error = function (msg) {
    this._captured.push("[ERROR] " + msg);
    return System.error(msg);
  };

  this.appendToPath = function () {
    return System.appendToPath.apply(System, arguments);
  };

  this.compareVersionNumber = function () {
    return System.compareVersionNumber.apply(System, arguments);
  };

  this.customEventUrl = function () {
    return System.customEventUrl.apply(System, arguments);
  };

  this.customEventUrlForServer = function () {
    return System.customEventUrlForServer.apply(System, arguments);
  };

  this.debug = function () {
    return System.debug.apply(System, arguments);
  };

  this.decimalToHex = function () {
    return System.decimalToHex.apply(System, arguments);
  };

  this.extractDirectory = function () {
    return System.extractDirectory.apply(System, arguments);
  };

  this.extractFileName = function () {
    return System.extractFileName.apply(System, arguments);
  };

  this.extractFileNameExtension = function () {
    return System.extractFileNameExtension.apply(System, arguments);
  };

  this.extractFileNameWithoutExtension = function () {
    return System.extractFileNameWithoutExtension.apply(System, arguments);
  };

  this.filterAutorized = function () {
    return System.filterAutorized.apply(System, arguments);
  };

  this.formatBinaryValue = function () {
    return System.formatBinaryValue.apply(System, arguments);
  };

  this.formatDate = function () {
    return System.formatDate.apply(System, arguments);
  };

  this.formatDuration = function () {
    return System.formatDuration.apply(System, arguments);
  };

  this.formatNumber = function () {
    return System.formatNumber.apply(System, arguments);
  };

  this.getAllModules = function () {
    return System.getAllModules();
  };

  this.getContext = function () {
    return System.getContext();
  };

  this.getCurrentTime = function () {
    return System.getCurrentTime();
  };

  this.getDate = function () {
    return System.getDate.apply(System, arguments);
  };

  this.getDateFromFormat = function () {
    return System.getDateFromFormat.apply(System, arguments);
  };

  this.getModule = function () {
    return System.getModule.apply(System, arguments);
  };

  this.getObjectClassName = function () {
    return System.getObjectClassName.apply(System, arguments);
  };

  this.getObjectId = function () {
    return System.getObjectId.apply(System, arguments);
  };

  this.getObjectPluginName = function () {
    return System.getObjectPluginName.apply(System, arguments);
  };

  this.getObjectType = function () {
    return System.getObjectType.apply(System, arguments);
  };

  this.getOsName = function () {
    return System.getOsName();
  };

  this.getTempDirectory = function () {
    return System.getTempDirectory();
  };

  this.hexToDecimal = function () {
    return System.hexToDecimal.apply(System, arguments);
  };

  this.isHostReachable = function () {
    return System.isHostReachable.apply(System, arguments);
  };

  this.isNotFound = function () {
    return System.isNotFound.apply(System, arguments);
  };

  this.nextUUID = function () {
    return System.nextUUID();
  };

  this.resolveHostName = function () {
    return System.resolveHostName.apply(System, arguments);
  };

  this.resolveIpAddress = function () {
    return System.resolveIpAddress.apply(System, arguments);
  };

  this.sendCustomEvent = function () {
    return System.sendCustomEvent.apply(System, arguments);
  };

  this.sleep = function () {
    return System.sleep.apply(System, arguments);
  };

  this.stdout = function () {
    return System.stdout.apply(System, arguments);
  };

  this.waitCustomEventUntil = function () {
    return System.waitCustomEventUntil.apply(System, arguments);
  };

  this.waitUntil = function () {
    return System.waitUntil.apply(System, arguments);
  };
}

if (_session != null) {
  (function _x() {
    var System = new ShadowSystem();
    var print = function (msg) {
      System.log(msg);
    };

    while (true) {
      _session.proceed();
      if (_session.mustClose) {
        _session.close();
        break;
      }

      if (_session.resumeSession) {
        try {
          var _all = Server.findAllForType("Workflow", null);
          var _code = CliConnector.prepareWorkflows(_all, "_all");
          eval(_code);
        } catch (e) {
          System.log(e);
          Server.log(e);
        }

        try {
          _all = Server.getAllModules();
          _code = CliConnector.prepareActions(_all, "_all");
          eval(_code);
        } catch (e) {
          System.log(e);
          Server.log(e);
        }

        try {
          _all = Server.getAllPluginTypes();
          _code = CliConnector.prepareTypes(_all, "_all");
          eval(_code);
        } catch (e) {
          System.log(e);
          Server.log(e);
        }

        continue;
      }

      if (_session.codeComplete) {
        _session.setCodeCompleteResult(this);
        continue;
      }

      if (_session.eval) {
        var _evalCode = _session.getEvalCode();
        System._clear();

        try {
          var _ = _prevResult;
          var _prevResult = eval(_evalCode);
          var _result = "" + _prevResult;
          var _error = null;
        } catch (e) {
          var _result = null;
          var _error = "" + e;
        }

        _session.setEvalResult(_result, _error, System._captured);
      }
    }
  }());
}]]></script>
    <in-binding>
      <bind name="_sessionId" type="string" export-name="_sessionId"></bind>
    </in-binding>
    <out-binding></out-binding>
    <position y="55.40909090909091" x="344.5"></position>
  </workflow-item>
  <presentation>
    <p-param name="name">
      <desc><![CDATA[name]]></desc>
    </p-param>
    <p-param name="ipAddress">
      <desc><![CDATA[ipAddress]]></desc>
    </p-param>
  </presentation>
</workflow>