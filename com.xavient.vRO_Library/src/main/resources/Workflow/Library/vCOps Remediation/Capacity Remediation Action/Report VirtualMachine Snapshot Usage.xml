<?xml version="1.0" encoding="UTF-8"?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item0" object-name="Workflow:name=generic" id="89808080808080808080808080808080B389808001334769655789d449bc34ac6" version="1.0.0" api-version="6.0.0" allowed-operations="vef" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Report VirtualMachine Snapshot Usage]]></display-name>
  <position y="20.0" x="180.0"></position>
  <input>
    <param name="vms" type="Array/VC:VirtualMachine"></param>
  </input>
  <output>
    <param name="reportMsg" type="string"></param>
  </output>
  <workflow-item name="item0" out-name="item1" type="task">
    <display-name><![CDATA[Extract Virtual Machines Snapshot Information]]></display-name>
    <script encoded="false"><![CDATA[reportMsg = "\n------- List of Powered Off Virtual Machines with Snapshot Usage: ---------------\n";
System.log(reportMsg);
for(var v = 0; v < vms.length; v++){
var vm = vms[v];

// FileMap - key: 'key'; value: ('name','size','type')
var FileMap = new Properties();
if (vm.layoutEx && vm.layoutEx.file) {
	for (var i in vm.layoutEx.file) {
		var fileInfo = vm.layoutEx.file[i];
		FileMap.put(fileInfo.key, new Array(fileInfo.name, fileInfo.size, fileInfo.type));
	}
}

// Get vmdkTotal & vmTotal
var vmdkTotal = 0;
var vmTotal = 0
for (var i in FileMap.keys) {
	var type = FileMap.get(FileMap.keys[i])[2]; 
	if ( type == 'diskDescriptor' ||
		 type == 'diskExtent' ||
		 type == 'digestDescriptor' ||
		 type == 'digestExtent' ) 
	{
		vmdkTotal += FileMap.get(FileMap.keys[i])[1];

	} 
	vmTotal	+= FileMap.get(FileMap.keys[i])[1];
}


// Get snapshot sizes
var runningDelta = vmdkTotal;
var snapshotSizeMap = new Properties();
if (vm.layoutEx && vm.layoutEx.snapshot) {
	for (var i in vm.layoutEx.snapshot) {
		var disks;
		if ( vm.layoutEx.snapshot[i].disk ) {
			disks 	= vm.layoutEx.snapshot[i].disk;
		} else {
			disks	= new Array();
		}
		var key 	= vm.layoutEx.snapshot[i].key.reference.value;
		var dataKey = vm.layoutEx.snapshot[i].dataKey;
		
		var snapshotDiskSize = 0;
		var snapshotDataSize = 0;
		
		// Add .vmsn size
		snapshotDataSize = FileMap.get(dataKey)[1];
		
		// Enumerate disk chains
		for(var j in disks) {
			if ( disks[j].chain && (disks[j].chain.length >= 0) ) {
				// Get last disk chain item
				var chain = disks[j].chain[disks[j].chain.length - 1];
				
				for( var k in chain.fileKey ) {
					snapshotDiskSize += FileMap.get(chain.fileKey[k])[1];
				} 
			} 
			
		} // end disk enum
		
		runningDelta = runningDelta - snapshotDiskSize;
		snapshotSizeMap[key] = snapshotDiskSize + snapshotDataSize;
	} // end snapshot enum
}

var indent = 0;

var rootSnapshotList;
if ( vm.snapshot && vm.snapshot.rootSnapshotList ) {
	rootSnapshotList = vm.snapshot.rootSnapshotList;
} else {
	rootSnapshotList = new Array();
}

var currentSnapshot = null;
if ( vm.snapshot && vm.snapshot.currentSnapshot ) {
	currentSnapshot = vm.snapshot.currentSnapshot;
}

var line =  "-----------------------------------------------------------------------";
var msg = "\nVM Name: " + vm.name + "\n";

msg = msg + "- Total Virtual Machine disk usage: " + (vmdkTotal / 1048576).toFixed(2) + " MB\n";
var counter = {count: 1};
if (rootSnapshotList.length > 0) {
    msg = msg + "Snapshot List for Virtual Machine:\n";
     
	msg = msg + PrintSnapshots(rootSnapshotList, counter);
	msg = msg + "\nTotal snapshot count is " + counter.count + ".\n";
} else {
	msg = msg + "No snapshots for Virtual Machine.\n";
}


System.log(msg);
System.error(line);
reportMsg = reportMsg + msg + line;
}


function PrintSnapshots (snapshots, counter) {
	var msg = "";
	for ( var i in snapshots ) {
		var thisSnapshot = snapshots[i];
		var childSnapshotList;
		if ( thisSnapshot.childSnapshotList ) {
			childSnapshotList = thisSnapshot.childSnapshotList;
		} else {
			childSnapshotList = new Array();
		}
		
		var snapshotName;
		if ( thisSnapshot.snapshot == currentSnapshot) {
			snapshotName = "[current] " + thisSnapshot.name;
		} else {
			snapshotName = thisSnapshot.name;
		}
		snapshotName = " - " + snapshotName +  " - ";
		var snapshotSize	= snapshotSizeMap[thisSnapshot.snapshot.reference.value]; 
		var snapshotPercent = (snapshotSize / vmTotal) * 100
		
		var pad = "";// Array(counter.count+1).join("::::");
		
		msg = msg+ pad + snapshotName + (snapshotSize / 1048576).toFixed(2) + " MB\n";
		
		if (childSnapshotList.length > 0) {
		    counter.count = counter.count + 1
			msg = msg + PrintSnapshots(childSnapshotList, counter);
		} 
	}
	
	return msg;
}
]]></script>
    <in-binding>
      <bind name="vms" type="Array/VC:VirtualMachine" export-name="vms"></bind>
    </in-binding>
    <out-binding>
      <bind name="reportMsg" type="string" export-name="reportMsg"></bind>
    </out-binding>
    <position y="80.0" x="140.0"></position>
  </workflow-item>
  <workflow-item name="item1" type="end" end-mode="0">
    <position y="130.0" x="180.0"></position>
  </workflow-item>
  <presentation>
    <p-param name="vms">
      <desc><![CDATA[vm]]></desc>
    </p-param>
  </presentation>
</workflow>