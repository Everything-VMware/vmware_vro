<?xml version="1.0" encoding="UTF-8"?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item1" object-name="Workflow:name=generic" id="A18080808080808080808080808080808080808001231146624761b79546544c2" version="1.0.3" api-version="6.0.0" allowed-operations="vef" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[Export logs and application settings]]></display-name>
  <description><![CDATA[Generates a ZIP archive of troubleshooting information that contains the following files: 
- Configuration files
- Server, configuration, wrapper and installation log files
- Workflow, action, Web view, configuration element, resource element, policy template, policy, authorization element and task information]]></description>
  <position y="10.0" x="180.0"></position>
  <input>
    <param name="localPath" type="Path">
      <description><![CDATA[Path on the vCO server to the folder in which to store the vCO_troubleshooting.zip file]]></description>
    </param>
  </input>
  <attrib name="zipFileName" type="string" read-only="true">
    <value encoded="n"><![CDATA[vCO_troubleshooting]]></value>
    <description><![CDATA[Name of the ZIP file containing the log files]]></description>
  </attrib>
  <workflow-item name="item1" out-name="item0" type="task">
    <display-name><![CDATA[export]]></display-name>
    <script encoded="false"><![CDATA[
var isWindows = isOsWindows();

zipFileName = zipFileName + "_" + System.formatDate(new Date(), "yyMMdd_HHmmss") + ".zip";

if (localPath != null && localPath.length > 0) {
	var zipResultsFile = System.appendToPath(localPath, zipFileName);
	var outputDir = localPath;
} else {
	var outputDir = getDefaultOutputDir();
	var outputDirReader = new FileReader(outputDir);
	if (outputDirReader.exists){
		var zipResultsFile = System.appendToPath(outputDir, zipFileName);
	} else {
		throw "No output directory exists";		
	}
}

var zipWriter = new ZipWriter(zipResultsFile);

// Configuration logs
var configLogsDir = "../../configuration/logs";
var configLogsFile = new File(configLogsDir);
var configLogFiles = configLogsFile.list();
for (var i = 0; i < configLogFiles.length; i++){
	if (configLogFiles[i].isDir != true && (configLogFiles[i].match('.log*') || configLogFiles[i].match('.out*'))){
		addItemToZip(configLogsDir + "/" + configLogFiles[i], "configurationLogs/" + configLogFiles[i]);
		System.log("Added configuration log: " + configLogFiles[i]);
	}
}

// Server logs
var serverLogsDir = "../logs";
var logsFile = new File(serverLogsDir);
var files = logsFile.list();
for (var i = 0;i < files.length; i++){
	if (files[i].isDir != true && (files[i].match('.log*') || files[i].match('.out*'))){
		addItemToZip(serverLogsDir + "/" + files[i], "serverLogs/" + files[i]);
		System.log("Added server log: " + files[i]);
	}
}

if (isWindows) {
	// Wrapper logs
	var serverBinDir = "../bin";
	var serverBinFile = new File(serverBinDir);
	var serverBinFiles = serverBinFile.list();	
	for (var i = 0;i < serverBinFiles.length; i++){
		if (serverBinFiles[i].isDir != true && serverBinFiles[i].match('.log*')){
			addItemToZip(serverBinDir + "/" + serverBinFiles[i], "serverLogs/" + serverBinFiles[i]);
			System.log("Added wrapper log: " + serverBinFiles[i]);
		}
	}
	
	// config client and log
	try {
		var clientDir = "../../apps";
		var clientFile = new File(clientDir);
		var clientFiles = clientFile.list();	
		for (var i = 0;i < clientFiles.length; i++){
			if (clientFiles[i].isDir != true && clientFiles[i].match('.log*')){
				addItemToZip(clientDir + "/" + clientFiles[i], "client/" + clientFiles[i]);
				System.log("Added client property: " + clientFiles[i]);
			}
		}
	} catch(e) {
		System.log("Client logs are not exported.");
	}	
}

// config Catalina
if (addItemToZip('../conf/catalina.properties', "serverConfiguration/" + 'catalina.properties')) {
	System.log("Added catalina.properties");
}
// config Log
if (addItemToZip('../conf/logging.properties', "serverConfiguration/" + 'logging.properties')) {
	System.log("Added logging.properties");
}
// config LDAP
if (addItemToZip('../conf/ldap.properties', "serverConfiguration/" + 'ldap.properties')) {
	System.log("Added ldap.properties");
}
// config SSO
if (addItemToZip('../conf/sso.properties', "serverConfiguration/" + 'sso.properties')) {
	System.log("Added sso.properties");
}
// config DB & Network
if (addItemToZip('../conf/vmo.properties', "serverConfiguration/" + 'vmo.properties')) {
	System.log("Added server vmo.properties");
}
// version vCO
if (addItemToZip('../../version.txt', 'version.txt')) {
	System.log("Added version.txt");
}

// config Plugins
try {
	var pluginsConfigDir = "../conf/plugins";
	var pluginsConfigFile = new File(pluginsConfigDir);
	var files = pluginsConfigFile.list('.xml');
	for (var i = 0;i < files.length; i++){
		if (files[i].isDir != true){
			addItemToZip(pluginsConfigDir + "/" + files[i], "serverConfiguration/plugins/" + files[i]);
			System.log("Added plugin configuration: " + files[i]);
		}
	}
} catch(e) {
	Server.error('Cannot Get Plug-In configurations','Exception while generating workflow export zip');
}

// Workflow Signatures
try {
	var wfPath = System.appendToPath(outputDir, "wf");
	System.getModule("com.vmware.util").exportAllWorkflowsToCsv(wfPath) ;
	addItemToZip(wfPath,'wflSignature.csv');
	System.log("Added wflSignature.csv");
}
catch(e){
	Server.error('Cannot Get Workflow Signatures','Exception while generating workflow export zip');
}

// Action Signatures
try {
	var actionPath = System.appendToPath(outputDir, "action");
	System.getModule("com.vmware.util").exportAllActionsToCsv(actionPath) ;
	addItemToZip(actionPath,'actionSignature.csv');
	System.log("Added actionSignature.csv");
}
catch(e){
	Server.error('Cannot Get Action Signatures','Exception while generating action export zip');
}

// Configuration Elements Signatures
try {
	var configPath = System.appendToPath(outputDir, "config");
	System.getModule("com.vmware.util").exportAllConfigurationElementsToCsv(configPath) ;
	addItemToZip(configPath,'configElements.csv');
	System.log("Added configElements.csv");
}
catch(e){
	Server.error('Cannot Get ConfigElement Signatures','Exception while generating configElement export zip');
}

// Resource Elements Signatures
try {
	var resourcePath = System.appendToPath(outputDir, "resource");
	System.getModule("com.vmware.util").exportAllResourceElementsToCsv(resourcePath) ;
	addItemToZip(resourcePath,'resourceElements.csv');
	System.log("Added resourceElements.csv");
}
catch(e){
	Server.error('Cannot Get ResourceElement Signatures','Exception while generating ResourceElement export zip');
}

// Policy Templates Signatures
try {
	var policyTemplatePath = System.appendToPath(outputDir, "policyTemplate");
	System.getModule("com.vmware.util").exportAllPolicyTemplatesToCsv(policyTemplatePath) ;
	addItemToZip(policyTemplatePath,'policyTemplates.csv');
	System.log("Added policyTemplates.csv");
}
catch(e){
	Server.error('Cannot Get PolicyTemplates Signatures','Exception while generating PolicyTemplates export zip');
}

// Policy Signatures
try {
	var policyPath = System.appendToPath(outputDir, "policy");
	System.getModule("com.vmware.util").exportAllPoliciesToCsv(policyPath) ;
	addItemToZip(policyPath,'policies.csv');
	System.log("Added policies.csv");
}
catch(e){
	Server.error('Cannot Get Policy Signatures','Exception while generating Policy export zip');
}

// Authorization Elements
try {
	var authPath = System.appendToPath(outputDir, "auth");
	System.getModule("com.vmware.util").exportAllAuthorizationElementsToCsv(authPath) ;
	addItemToZip(authPath,'authorizationElements.csv');
	System.log("Added authorizationElements.csv");
}
catch(e){
	Server.error('Cannot Get Authorization Element Signatures','Exception while generating Authorization Element export zip');
}

// Tasks
try {
	var taskPath = System.appendToPath(outputDir, "task");
	System.getModule("com.vmware.util").exportAllTasksToCsv(taskPath) ;
	addItemToZip(taskPath,'tasks.csv');
	System.log("Added tasks.csv");
}
catch(e){
	Server.error('Cannot Get Tasks','Exception while generating task export zip');
}

//Version of VCenters defined to VC plugin (if any)
try {
	var connections = VcPlugin.allSdkConnections;
	if (connections.length > 0){
		var vcInfoPathAndName = System.appendToPath(outputDir, "vcInfo.log");
		var vcFile = new FileWriter(vcInfoPathAndName);
		vcFile.open();
		vcFile.clean();
		for (var i in connections) {
			vcFile.write(connections[i].name + " " + connections[i].aboutInfo.fullName + "\n");
		}
		vcFile.close();
		addItemToZip(vcInfoPathAndName,'VC/vcInfo.log');
		System.log("Added VC specific components");
	}
} catch (e){
	System.log('No VC plugin defined ' + e);
}

// close ZIP
zipWriter.writeZip();

System.log("The results have been written to " + zipResultsFile);
Server.log("The results have been written to " + zipResultsFile);


function addItemToZip(itemFile,itemName) {
	try {
		var fileReader = new FileReader(itemFile);
		fileReader.open();
		var fileContent = fileReader.readAll();
		zipWriter.addContent(itemName,fileContent);
		return true;
	} catch(e){
		Server.error('Cannot Add File to Zip','Exception while generating configuration export zip, file ' + itemFile + ': ' + e);
		return false;
	} finally{
		try {
			fileReader.close();
		} catch(e1) {}
	}
}

function getDefaultOutputDir() {
 	if (isWindows) {
		return "C:/orchestrator";
	} else {
		return "/var/run/vco";
	}	
}

function isOsWindows() {
	var osName = System.getOsName().toLowerCase();
	return osName.search("windows") >= 0;
}]]></script>
    <in-binding>
      <bind name="zipFileName" type="string" export-name="zipFileName"></bind>
      <bind name="localPath" type="Path" export-name="localPath"></bind>
    </in-binding>
    <out-binding></out-binding>
    <position y="65.0" x="145.0"></position>
  </workflow-item>
  <workflow-item name="item0" type="end" end-mode="0">
    <position y="100.45454545454544" x="185.0"></position>
  </workflow-item>
  <presentation>
    <desc><![CDATA[
]]></desc>
    <p-step>
      <title><![CDATA[Export troubleshooting information]]></title>
      <p-group>
        <title><![CDATA[Results]]></title>
        <desc><![CDATA[This is optional. 

If you specifiy a directory, please ensure that vCO is configured with write access to that directory. 

If the directory is not specified, the output file will be stored in "C:/orchestrator" on Windows systems or in "/var/run/vco" on Linux systems. Please ensure these directories exist. ]]></desc>
        <p-param name="localPath">
          <desc><![CDATA[Path on the vCO server to the folder in which to store the results]]></desc>
        </p-param>
      </p-group>
    </p-step>
  </presentation>
</workflow>